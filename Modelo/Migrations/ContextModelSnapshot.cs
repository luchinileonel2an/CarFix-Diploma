// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modelo;

#nullable disable

namespace Modelo.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entidades.Compras.DetalleOrdenCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("OrdenCompraId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrdenCompraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetallesOrdenesCompra");
                });

            modelBuilder.Entity("Entidades.Compras.OrdenCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEnvio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaRecepcion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProveedorId");

                    b.ToTable("OrdenesCompra");
                });

            modelBuilder.Entity("Entidades.Compras.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockActual")
                        .HasColumnType("int");

                    b.Property<int>("StockMinimo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Categoria = "Filtros",
                            Codigo = "P001",
                            Descripcion = "Filtro de aceite universal",
                            Nombre = "Filtro de Aceite",
                            PrecioUnitario = 15.50m,
                            StockActual = 25,
                            StockMinimo = 10
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Categoria = "Lubricantes",
                            Codigo = "P002",
                            Descripcion = "Aceite sintético 5W30",
                            Nombre = "Aceite Motor 5W30",
                            PrecioUnitario = 45.00m,
                            StockActual = 12,
                            StockMinimo = 5
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Categoria = "Frenos",
                            Codigo = "P003",
                            Descripcion = "Pastillas delanteras universales",
                            Nombre = "Pastillas de Freno",
                            PrecioUnitario = 85.00m,
                            StockActual = 15,
                            StockMinimo = 8
                        });
                });

            modelBuilder.Entity("Entidades.Compras.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Cuit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Proveedores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Cuit = "20-12345678-9",
                            Direccion = "Av. Principal 123",
                            Email = "ventas@repuestos.com",
                            Nombre = "Repuestos SA",
                            Telefono = "123456789"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Cuit = "20-98765432-1",
                            Direccion = "Calle Secundaria 456",
                            Email = "pedidos@autopartes.com",
                            Nombre = "AutoPartes SRL",
                            Telefono = "987654321"
                        });
                });

            modelBuilder.Entity("Entidades.Core.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Grupos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Acceso total al sistema",
                            Nombre = "Administradores"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Acceso limitado para operaciones diarias",
                            Nombre = "Operadores"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Acceso para tecnicos del taller",
                            Nombre = "Tecnicos"
                        });
                });

            modelBuilder.Entity("Entidades.Core.Permiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Modulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Permisos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Ver clientes",
                            Modulo = "Clientes",
                            Nombre = "CLIENTES_VER"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Crear clientes",
                            Modulo = "Clientes",
                            Nombre = "CLIENTES_CREAR"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Editar clientes",
                            Modulo = "Clientes",
                            Nombre = "CLIENTES_EDITAR"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Eliminar clientes",
                            Modulo = "Clientes",
                            Nombre = "CLIENTES_ELIMINAR"
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Ver tecnicos",
                            Modulo = "Tecnicos",
                            Nombre = "TECNICOS_VER"
                        },
                        new
                        {
                            Id = 6,
                            Descripcion = "Crear tecnicos",
                            Modulo = "Tecnicos",
                            Nombre = "TECNICOS_CREAR"
                        },
                        new
                        {
                            Id = 7,
                            Descripcion = "Editar tecnicos",
                            Modulo = "Tecnicos",
                            Nombre = "TECNICOS_EDITAR"
                        },
                        new
                        {
                            Id = 8,
                            Descripcion = "Eliminar tecnicos",
                            Modulo = "Tecnicos",
                            Nombre = "TECNICOS_ELIMINAR"
                        },
                        new
                        {
                            Id = 9,
                            Descripcion = "Ver vehiculos",
                            Modulo = "Vehiculos",
                            Nombre = "VEHICULOS_VER"
                        },
                        new
                        {
                            Id = 10,
                            Descripcion = "Crear vehiculos",
                            Modulo = "Vehiculos",
                            Nombre = "VEHICULOS_CREAR"
                        },
                        new
                        {
                            Id = 11,
                            Descripcion = "Editar vehiculos",
                            Modulo = "Vehiculos",
                            Nombre = "VEHICULOS_EDITAR"
                        },
                        new
                        {
                            Id = 12,
                            Descripcion = "Eliminar vehiculos",
                            Modulo = "Vehiculos",
                            Nombre = "VEHICULOS_ELIMINAR"
                        },
                        new
                        {
                            Id = 13,
                            Descripcion = "Ver tickets",
                            Modulo = "Tickets",
                            Nombre = "TICKETS_VER"
                        },
                        new
                        {
                            Id = 14,
                            Descripcion = "Crear tickets",
                            Modulo = "Tickets",
                            Nombre = "TICKETS_CREAR"
                        },
                        new
                        {
                            Id = 15,
                            Descripcion = "Editar tickets",
                            Modulo = "Tickets",
                            Nombre = "TICKETS_EDITAR"
                        },
                        new
                        {
                            Id = 16,
                            Descripcion = "Eliminar tickets",
                            Modulo = "Tickets",
                            Nombre = "TICKETS_ELIMINAR"
                        },
                        new
                        {
                            Id = 17,
                            Descripcion = "Administrar usuarios",
                            Modulo = "Administracion",
                            Nombre = "ADMIN_USUARIOS"
                        },
                        new
                        {
                            Id = 18,
                            Descripcion = "Administrar grupos",
                            Modulo = "Administracion",
                            Nombre = "ADMIN_GRUPOS"
                        },
                        new
                        {
                            Id = 19,
                            Descripcion = "Administrar permisos",
                            Modulo = "Administracion",
                            Nombre = "ADMIN_PERMISOS"
                        },
                        new
                        {
                            Id = 20,
                            Descripcion = "Ver órdenes de compra",
                            Modulo = "Compras",
                            Nombre = "COMPRAS_VER"
                        },
                        new
                        {
                            Id = 21,
                            Descripcion = "Crear órdenes de compra",
                            Modulo = "Compras",
                            Nombre = "COMPRAS_CREAR"
                        },
                        new
                        {
                            Id = 22,
                            Descripcion = "Editar órdenes de compra",
                            Modulo = "Compras",
                            Nombre = "COMPRAS_EDITAR"
                        },
                        new
                        {
                            Id = 23,
                            Descripcion = "Eliminar órdenes de compra",
                            Modulo = "Compras",
                            Nombre = "COMPRAS_ELIMINAR"
                        },
                        new
                        {
                            Id = 24,
                            Descripcion = "Ver proveedores",
                            Modulo = "Compras",
                            Nombre = "PROVEEDORES_VER"
                        },
                        new
                        {
                            Id = 25,
                            Descripcion = "Crear proveedores",
                            Modulo = "Compras",
                            Nombre = "PROVEEDORES_CREAR"
                        },
                        new
                        {
                            Id = 26,
                            Descripcion = "Ver productos",
                            Modulo = "Compras",
                            Nombre = "PRODUCTOS_VER"
                        },
                        new
                        {
                            Id = 27,
                            Descripcion = "Crear productos",
                            Modulo = "Compras",
                            Nombre = "PRODUCTOS_CREAR"
                        });
                });

            modelBuilder.Entity("Entidades.Core.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UltimoAcceso")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Email = "admin@carfix.com",
                            FechaCreacion = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreUsuario = "admin",
                            PasswordHash = "7eGKCEt+3dTARc3W9axlX1JfVJgDMgZejXz+LJ3i5jA="
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Email = "operador@carfix.com",
                            FechaCreacion = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreUsuario = "operador",
                            PasswordHash = "KEtX1QmCkgYmnFP60J4nzZLp+ylHxQI5aVZCdA0SMkI="
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Email = "tecnico@carfix.com",
                            FechaCreacion = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreUsuario = "tecnico",
                            PasswordHash = "+SK/OKnavVUCb9ZIATUH3H3PUMKs4gJtaBdL+UMhEEE="
                        });
                });

            modelBuilder.Entity("Entidades.Tickets.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dni")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "Mendoza",
                            Correo = "sofia.mendoza@example.com",
                            Dni = 38765432,
                            Nombre = "Sofia",
                            Telefono = 11223
                        },
                        new
                        {
                            Id = 2,
                            Apellido = "Ramirez",
                            Correo = "juan.ramirez@example.com",
                            Dni = 27654321,
                            Nombre = "Juan",
                            Telefono = 11667
                        },
                        new
                        {
                            Id = 3,
                            Apellido = "Flores",
                            Correo = "ana.flores@example.com",
                            Dni = 49876543,
                            Nombre = "Ana",
                            Telefono = 11990
                        });
                });

            modelBuilder.Entity("Entidades.Tickets.Tecnico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dni")
                        .HasColumnType("int");

                    b.Property<int>("Especialidad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tecnicos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "Pérez",
                            Correo = "juan.perez@tecnico.com",
                            Dni = 12345678,
                            Especialidad = 1,
                            Nombre = "Juan"
                        },
                        new
                        {
                            Id = 2,
                            Apellido = "Sánchez",
                            Correo = "maria.sanchez@tecnico.com",
                            Dni = 98765432,
                            Especialidad = 2,
                            Nombre = "María"
                        },
                        new
                        {
                            Id = 3,
                            Apellido = "López",
                            Correo = "carlos.lopez@tecnico.com",
                            Dni = 55555555,
                            Especialidad = 0,
                            Nombre = "Carlos"
                        });
                });

            modelBuilder.Entity("Entidades.Tickets.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("TecnicoId")
                        .HasColumnType("int");

                    b.Property<int>("VehiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("TecnicoId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClienteId = 1,
                            Descripcion = "Cambio de aceite y filtro",
                            Estado = 0,
                            FechaCreacion = new DateTime(2023, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TecnicoId = 1,
                            VehiculoId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClienteId = 2,
                            Descripcion = "Reparación de parabrisas",
                            Estado = 0,
                            FechaCreacion = new DateTime(2023, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TecnicoId = 3,
                            VehiculoId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClienteId = 3,
                            Descripcion = "Falla en instrumental",
                            Estado = 0,
                            FechaCreacion = new DateTime(2023, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TecnicoId = 2,
                            VehiculoId = 3
                        });
                });

            modelBuilder.Entity("Entidades.Tickets.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Año")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Dominio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Vehiculos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Año = 2020,
                            ClienteId = 1,
                            Dominio = "ABC123D",
                            Marca = "Ford",
                            Modelo = "Fiesta"
                        },
                        new
                        {
                            Id = 2,
                            Año = 2018,
                            ClienteId = 2,
                            Dominio = "XYZ789W",
                            Marca = "Chevrolet",
                            Modelo = "Cruze"
                        },
                        new
                        {
                            Id = 3,
                            Año = 2022,
                            ClienteId = 3,
                            Dominio = "LMN456K",
                            Marca = "Toyota",
                            Modelo = "Corolla"
                        });
                });

            modelBuilder.Entity("Entidades.Validaciones.AuditoriaLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DireccionIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("AuditoriasLogin");
                });

            modelBuilder.Entity("Entidades.Validaciones.AuditoriaOrdenesCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Campo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrdenCompraId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<string>("ValorAnterior")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ValorNuevo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("Accion");

                    b.HasIndex("FechaHora");

                    b.HasIndex("OrdenCompraId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("AuditoriasOrdenesCompra");
                });

            modelBuilder.Entity("Entidades.Validaciones.AuditoriaTickets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Campo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<string>("ValorAnterior")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ValorNuevo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("Accion");

                    b.HasIndex("FechaHora");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("AuditoriasTickets");
                });

            modelBuilder.Entity("GrupoPermisos", b =>
                {
                    b.Property<int>("GruposId")
                        .HasColumnType("int");

                    b.Property<int>("PermisosId")
                        .HasColumnType("int");

                    b.HasKey("GruposId", "PermisosId");

                    b.HasIndex("PermisosId");

                    b.ToTable("GrupoPermisos", (string)null);

                    b.HasData(
                        new
                        {
                            GruposId = 1,
                            PermisosId = 1
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 2
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 3
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 4
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 5
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 6
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 7
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 8
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 9
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 10
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 11
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 12
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 13
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 14
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 15
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 16
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 17
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 18
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 19
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 20
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 21
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 22
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 23
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 24
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 25
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 26
                        },
                        new
                        {
                            GruposId = 1,
                            PermisosId = 27
                        },
                        new
                        {
                            GruposId = 3,
                            PermisosId = 13
                        },
                        new
                        {
                            GruposId = 3,
                            PermisosId = 14
                        },
                        new
                        {
                            GruposId = 3,
                            PermisosId = 15
                        },
                        new
                        {
                            GruposId = 3,
                            PermisosId = 16
                        },
                        new
                        {
                            GruposId = 2,
                            PermisosId = 1
                        },
                        new
                        {
                            GruposId = 2,
                            PermisosId = 2
                        },
                        new
                        {
                            GruposId = 2,
                            PermisosId = 3
                        },
                        new
                        {
                            GruposId = 2,
                            PermisosId = 4
                        },
                        new
                        {
                            GruposId = 2,
                            PermisosId = 9
                        },
                        new
                        {
                            GruposId = 2,
                            PermisosId = 10
                        },
                        new
                        {
                            GruposId = 2,
                            PermisosId = 11
                        },
                        new
                        {
                            GruposId = 2,
                            PermisosId = 12
                        },
                        new
                        {
                            GruposId = 2,
                            PermisosId = 13
                        },
                        new
                        {
                            GruposId = 2,
                            PermisosId = 14
                        },
                        new
                        {
                            GruposId = 2,
                            PermisosId = 15
                        },
                        new
                        {
                            GruposId = 2,
                            PermisosId = 16
                        });
                });

            modelBuilder.Entity("UsuarioGrupos", b =>
                {
                    b.Property<int>("UsuariosId")
                        .HasColumnType("int");

                    b.Property<int>("GruposId")
                        .HasColumnType("int");

                    b.HasKey("UsuariosId", "GruposId");

                    b.HasIndex("GruposId");

                    b.ToTable("UsuarioGrupos", (string)null);

                    b.HasData(
                        new
                        {
                            UsuariosId = 1,
                            GruposId = 1
                        },
                        new
                        {
                            UsuariosId = 2,
                            GruposId = 2
                        },
                        new
                        {
                            UsuariosId = 3,
                            GruposId = 3
                        });
                });

            modelBuilder.Entity("Entidades.Compras.DetalleOrdenCompra", b =>
                {
                    b.HasOne("Entidades.Compras.OrdenCompra", "OrdenCompra")
                        .WithMany("Detalles")
                        .HasForeignKey("OrdenCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Compras.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdenCompra");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Entidades.Compras.OrdenCompra", b =>
                {
                    b.HasOne("Entidades.Compras.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Entidades.Tickets.Ticket", b =>
                {
                    b.HasOne("Entidades.Tickets.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Tickets.Tecnico", "Tecnico")
                        .WithMany()
                        .HasForeignKey("TecnicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Tickets.Vehiculo", "Vehiculo")
                        .WithMany()
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Tecnico");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("Entidades.Tickets.Vehiculo", b =>
                {
                    b.HasOne("Entidades.Tickets.Cliente", "Dueño")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dueño");
                });

            modelBuilder.Entity("Entidades.Validaciones.AuditoriaLogin", b =>
                {
                    b.HasOne("Entidades.Core.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Entidades.Validaciones.AuditoriaOrdenesCompra", b =>
                {
                    b.HasOne("Entidades.Core.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Entidades.Validaciones.AuditoriaTickets", b =>
                {
                    b.HasOne("Entidades.Core.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GrupoPermisos", b =>
                {
                    b.HasOne("Entidades.Core.Grupo", null)
                        .WithMany()
                        .HasForeignKey("GruposId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Core.Permiso", null)
                        .WithMany()
                        .HasForeignKey("PermisosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsuarioGrupos", b =>
                {
                    b.HasOne("Entidades.Core.Grupo", null)
                        .WithMany()
                        .HasForeignKey("GruposId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Core.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entidades.Compras.OrdenCompra", b =>
                {
                    b.Navigation("Detalles");
                });
#pragma warning restore 612, 618
        }
    }
}
